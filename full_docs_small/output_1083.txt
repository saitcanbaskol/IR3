"Project Euler – Problem 4Today it is time to look at the solution to Problem 4 of Project Euler. It differs a bit in the nature of the problem from the first 3 we have looked at so far. However, it is still mathematics and a solution can still be coded, and most important it is still fun.The problem formulation reads:A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.Find the largest palindrome made from the product of two 3-digit numbers.I think it is a nice recreational little exercise.Before we jump to finding the answer to the problem I want to share a site with you that I stumbled on called Functional fun. The site also deals with Project Euler problems, but solves them using Linq, rather than plain C#.Solution strategiesFor this exercise I briefly discuss two different solution strategies, but only present you with one solution. We need to find a palindrome which is the product of two 3-digit numbers. And that we can approach from two different angles.a) We can start multiplying 3-digit numbers and then check if the result is a palindrome.b) We can make palindromes and see if we can find to 3-digit numbers which are the factor pair we are looking for.My quick calculations shows me that both approaches has the same amount of possible checks to make to find the palindrome.Solution bI will pursue solution strategy b, as that is the first I thought of.if we we square 999, we will have the largest possible number we can as a product of two 3-digit numbers. 999 * 999 = 998001. The largest palindrome which can be made which is less than that must be 997799. The smallest possible palindrome we can encounter is 11111. Under the assumption that we will only have to deal with even digit palindromes a helper function for constructing palindromes is fairly simple.I cheated a bit and made the palindromes with string manipulation like this:1234private int makePalindrome ( int firstHalf) {char  [] reversed = firstHalf.ToString ().Reverse ().ToArray ();return Convert.ToInt32 (firstHalf + new string  (reversed));}Once we have obtained a palindrome number ( p ), we need to check if a factor pair ( i, j) of 3-digit numbers exists. In Problem 3, we established that i in such a factor pair must be larger than the square root of the palindrome number, and as a result j must be lower. So we can limit our search for i knowing that we only have to check number between 999 and the square root of the palindrome number. Furthermore we can limit our search by checking that j = p/i < 1000, since it means that the proposed solution no longer consists of two 3-digit numbers, which was one of the requirements.Now we have derived a set of stopping conditions for the search, all we need to do now, is to check if i is a factor to the palindrome. This can be done with my beloved modulo operator.12345678910111213141516171819202122bool found = false;int firstHalf = 998, palin = 0;int  [] factors = new int  [2] ;while  (!found) {firstHalf--;palin = makePalindrome (firstHalf);for  ( int i = 999; i > 99; i--) {if  ( (palin / i) > 999 || i*i < palin) {break;}if  ( (palin % i == 0)) {found = true;factors [0] = palin / i;factors [1] = i;break;}}}Console.WriteLine ( ""Found the palindrom {0}, which is made from {1}* {2}"", palin, factors [0], factors [1]);On line 9 in the code, I check the stop conditions for the search, which we deduced earlier on. And in if clause line 13-18, we check if we have indeed found a factor, and in that case store the result before we end.With this code I get the result:12Found the palindrom 906609, which is made from 913*993Solution took 15,625 msShare this:Related postsProject Euler 41: What is the largest n-digit pandigital prime that exists?This time we mix two old topics together and form a new question. This time Project Euler has mixed pandigital numbers and primes and Problem 41 asks us to find the largest such number. The problem description reads We shall say that an n-digit number is pandigital if it makes…Project Euler 38: What is the largest 1 to 9 pandigital that can be formed by multiplying a fixed number by 1, 2, 3, ... ?Pandigital numbers were the topic of Problem 32 and here in Problem 38 of Project Euler we visit them again. The problem reads Take the number 192 and multiply it by each of 1, 2, and 3: 192 x 1 = 192 192 x 2 = 384 192 x 3…Project Euler 52: Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits in some orderProblem 52 of Project Euler reads It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order. Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits. Between solving this problem…Tags: Brute Force, C#, Palindromes, Project EulerPosted by KristianView all posts by Kristian"
